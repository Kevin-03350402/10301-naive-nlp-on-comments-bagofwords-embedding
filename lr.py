import numpy as np
import csv


import sys
import math
from matplotlib import pyplot as plt


def sigmoid(x):
    """
    Implementation of the sigmoid function.

    Parameters:
        x (str): Input np.ndarray.

    Returns:
        An np.ndarray after applying the sigmoid function element-wise to the
        input.
    """
    e = np.exp(x)
    return e / (1 + e)




formatted_train_input = dataset = np.loadtxt(sys.argv[1],delimiter='\t')

formatted_validation_input = np.loadtxt(sys.argv[2],delimiter='\t')

formatted_test_input = np.loadtxt(sys.argv[3],delimiter='\t')

num_epoch = int(sys.argv[7])

learning_rate= float(sys.argv[8])



# extraxt the y labels
trainy = formatted_train_input[:,0]

trainypre = np.array(trainy).reshape([1,len(trainy)])
# extract the x labels
trainx = formatted_train_input[:,1:]

# numbber of bias
trainbiasnum = len(trainx)

bias = np.ones(trainbiasnum).reshape([trainbiasnum,1])
# add a bias 1 column to the first column
x_bias = np.hstack((bias,trainx))

thetaini = np.zeros(len(x_bias[0])).reshape([len(x_bias[0]),1])

thetavec = []
def train(theta, X, y, num_epoch, learning_rate):
    neglog = 0


    for r in range(0 , num_epoch):
        alpha = learning_rate
        totalrows = len(X)
        # go through all examples
        for i in range(0, totalrows):
            example = X[i]
            ylab = y[i]
            m = len(example)
            

            examplem1 = example.reshape([1,m])

            thetat = np.array(theta).T
            examplemt = np.array(examplem1).T
            p = (thetat @ examplemt)
            pf = float(p)

            sqaurebrac = float(ylab -float(sigmoid(p)))
            lgp = math.log(1+math.exp(pf))
            ji = (-int(ylab)*pf)+lgp
            neglog+=ji

            update = np.array(examplem1*sqaurebrac*alpha).reshape([m,1])
            theta = theta+update
        thetavec.append(theta)

    return (theta)


            
            







def predict(theta, X):
    totalrows = len(X)
    res = 1*(np.array(np.matmul(X,theta)>=0).T)
    return res

theta = train(thetaini, x_bias, trainy, num_epoch, learning_rate)






def compute_error(y_pred, y):
    length = y.shape[1]
    right = (int(np.sum(y_pred == y)))
    error = length - right
    return (error/length)
    
    







# extraxt the test y labels
testy = formatted_test_input[:,0]

testypre = np.array(testy).reshape([1,len(testy)])
# extract the test x labels
testx = formatted_test_input[:,1:]

# numbber of bias
testbiasnum = len(testx)

testbias = np.ones(testbiasnum).reshape([testbiasnum,1])
# add a bias 1 column to the first column
test_x_bias = np.hstack((testbias,testx))



ytrainhat = predict(theta,x_bias)
ytesthat = predict(theta, test_x_bias)

trainerror = compute_error(ytrainhat, trainypre)
testerror = compute_error(ytesthat, testypre)



# read in thge txt 
trainout= open(sys.argv[4],"w+")

testout = open(sys.argv[5],"w+")

metric = open(sys.argv[6],"w+")

fytrainraw = ytrainhat.tolist()
fytrain = fytrainraw[0]

fytestraw = ytesthat.tolist()
fytest = fytestraw[0]


ltrainy = len(fytrain)
for i in range (0,ltrainy):
    trainout.write(f'{fytrain[i]}\n')

ltesty = len(fytest)

for i in range (0, ltesty):
    testout.write(f'{fytest[i]}\n')


metric.write(f'error(train): {trainerror :.6f}\n')
metric.write(f'error(test): {testerror :.6f}\n')


def neglog(theta, X, y, num_epoch, learning_rate):
    
    nll=[]


    for r in range(0 , num_epoch):
        neg = 0
        alpha = learning_rate
        totalrows = len(X)
        # go through all examples
        for i in range(0, totalrows):
            example = X[i]
            ylab = y[i]
            m = len(example)
            

            examplem1 = example.reshape([1,m])

            thetat = np.array(theta).T
            examplemt = np.array(examplem1).T
            p = (thetat @ examplemt)
            pf = float(p)
            sqaurebrac = float(ylab -float(sigmoid(p)))
            lgp = math.log(1+math.exp(pf))
            ji = (-int(ylab)*pf+lgp)
            neg+=ji
        


            

            update = np.array(examplem1*sqaurebrac*alpha).reshape([m,1])
            theta = theta+update
        nll.append(round(neg/totalrows,6))

    return(nll)

# extraxt the test y labels
val_y = formatted_validation_input[:,0]

valypre = np.array(val_y).reshape([1,len(val_y)])
# extract the test x labels
val_x = formatted_validation_input[:,1:]

# numbber of bias
valbiasnum = len(val_x)

val_bias = np.ones(valbiasnum).reshape([valbiasnum,1])
# add a bias 1 column to the first column
val_x_bias = np.hstack((val_bias,val_x))






 
theta = train(thetaini, x_bias, trainy, num_epoch, learning_rate)

def valtestobj(thetavec, X, y, num_epoch, learning_rate):
    nll=[]
    for r in range(0 , num_epoch):
        neg = 0
        alpha = learning_rate
        totalrows = len(X)
        # go through all examples
        thetav = thetavec[r]

        for i in range(0, totalrows):
            example = X[i]

            ylab = y[i]
            m = len(example)
            examplem1 = example.reshape([1,m])
            thetat = np.array(thetav).T
            examplemt = np.array(examplem1).T

            p = (thetat @ examplemt)
            pf = float(p)
            lgp = math.log(1+math.exp(pf))
            ji = (-int(ylab)*pf+lgp)
            neg+=ji
        nll.append(round(neg/totalrows,6))
    return(nll)

x = np.arange(1, 1001)



y1 = np.array([0.670414, 0.650069, 0.631629, 0.614834, 0.599484, 0.585406, 0.572456, 0.560506, 0.549446, 0.539182, 0.529631, 0.520722, 0.512391, 0.504584, 0.497252, 0.490353, 0.48385, 0.477707, 0.471896, 0.466391, 0.461166, 0.4562, 0.451475, 0.446973, 0.442678, 0.438575, 0.434652, 0.430897, 0.427298, 0.423847, 0.420533, 0.417348, 0.414285, 0.411337, 0.408496, 0.405758, 0.403116, 0.400565, 0.3981, 0.395718, 0.393413, 0.391181, 0.38902, 0.386925, 0.384894, 0.382924, 0.381011, 0.379153, 0.377348, 0.375593, 0.373886, 0.372226, 0.370609, 0.369035, 0.367502, 0.366007, 0.36455, 0.363128, 0.361742, 
0.360388, 0.359067, 0.357776, 0.356515, 0.355282, 0.354077, 0.352899, 0.351746, 0.350619, 0.349515, 0.348434, 0.347376, 0.346339, 0.345323, 0.344328, 0.343352, 0.342396, 0.341457, 0.340537, 0.339634, 0.338748, 0.337878, 0.337024, 0.336185, 0.335361, 0.334552, 0.333757, 0.332976, 0.332208, 0.331453, 0.330711, 0.329981, 0.329263, 0.328557, 0.327862, 0.327178, 0.326505, 0.325843, 0.32519, 0.324548, 0.323916, 0.323293, 0.322679, 0.322075, 0.321479, 0.320892, 0.320313, 0.319743, 0.319181, 0.318627, 0.31808, 0.317541, 0.317009, 0.316485, 0.315968, 0.315457, 0.314954, 0.314456, 0.313966, 0.313482, 0.313004, 0.312532, 0.312066, 0.311606, 0.311151, 0.310702, 0.310259, 0.309821, 0.309389, 0.308961, 0.308539, 0.308122, 0.307709, 0.307302, 0.306899, 0.306501, 0.306107, 0.305718, 0.305333, 0.304952, 0.304576, 0.304204, 0.303836, 0.303472, 0.303111, 0.302755, 0.302403, 0.302054, 0.301709, 0.301367, 0.301029, 0.300695, 0.300364, 0.300036, 0.299712, 0.299391, 0.299073, 0.298759, 0.298447, 0.298139, 0.297833, 0.297531, 0.297231, 0.296935, 0.296641, 0.29635, 0.296061, 0.295776, 0.295493, 0.295213, 0.294935, 0.29466, 0.294387, 0.294117, 0.293849, 0.293584, 0.293321, 0.29306, 0.292802, 0.292546, 0.292292, 0.29204, 0.291791, 0.291544, 0.291299, 0.291056, 0.290814, 0.290575, 0.290339, 0.290103, 0.28987, 0.289639, 0.28941, 0.289183, 0.288957, 0.288734, 0.288512, 0.288292, 0.288073, 0.287857, 0.287642, 0.287428, 0.287217, 0.287007, 0.286799, 0.286592, 0.286387, 0.286183, 0.285981, 0.285781, 0.285582, 0.285385, 0.285189, 0.284994, 0.284801, 0.284609, 0.284419, 0.28423, 0.284043, 0.283857, 0.283672, 0.283489, 0.283306, 0.283126, 0.282946, 0.282768, 0.282591, 0.282415, 0.28224, 0.282067, 0.281895, 0.281724, 0.281554, 0.281385, 0.281218, 0.281051, 0.280886, 0.280722, 0.280559, 0.280397, 0.280236, 0.280076, 0.279917, 0.27976, 0.279603, 0.279447, 0.279293, 0.279139, 0.278986, 0.278834, 0.278684, 0.278534, 0.278385, 0.278237, 0.27809, 0.277944, 0.277799, 0.277654, 0.277511, 0.277369, 0.277227, 0.277086, 0.276946, 0.276807, 0.276669, 0.276532, 0.276395, 0.276259, 0.276124, 0.27599, 0.275857, 0.275724, 0.275593, 0.275462, 0.275331, 0.275202, 0.275073, 0.274945, 0.274818, 0.274691, 0.274565, 0.27444, 0.274316, 0.274192, 0.274069, 0.273947, 0.273825, 0.273704, 0.273584, 0.273465, 0.273346, 0.273227, 0.27311, 0.272993, 0.272876, 0.272761, 0.272646, 0.272531, 0.272417, 0.272304, 0.272191, 0.272079, 0.271968, 0.271857, 0.271747, 0.271637, 0.271528, 0.271419, 0.271311, 0.271204, 0.271097, 0.270991, 0.270885, 0.27078, 0.270675, 0.270571, 0.270467, 0.270364, 0.270261, 0.270159, 0.270058, 0.269957, 0.269856, 0.269756, 0.269656, 0.269557, 0.269459, 0.269361, 0.269263, 0.269166, 0.269069, 0.268973, 0.268877, 0.268782, 0.268687, 0.268593, 0.268499, 0.268405, 0.268312, 
0.26822, 0.268128, 0.268036, 0.267945, 0.267854, 0.267763, 0.267673, 0.267584, 0.267495, 0.267406, 0.267317, 0.26723, 0.267142, 0.267055, 0.266968, 0.266882, 0.266796, 0.26671, 0.266625, 0.26654, 0.266456, 0.266372, 0.266288, 0.266205, 0.266122, 0.266039, 0.265957, 0.265875, 0.265794, 0.265713, 0.265632, 0.265551, 0.265471, 0.265392, 0.265312, 0.265233, 0.265155, 0.265076, 0.264998, 0.26492, 0.264843, 0.264766, 0.264689, 0.264613, 0.264537, 0.264461, 0.264386, 0.264311, 0.264236, 0.264161, 0.264087, 0.264013, 0.26394, 0.263866, 0.263793, 0.263721, 0.263648, 0.263576, 0.263505, 
0.263433, 0.263362, 0.263291, 0.26322, 0.26315, 0.26308, 0.26301, 0.262941, 0.262871, 0.262802, 0.262734, 0.262665, 0.262597, 0.262529, 0.262462, 
0.262394, 0.262327, 0.262261, 0.262194, 0.262128, 0.262062, 0.261996, 0.26193, 0.261865, 0.2618, 0.261735, 0.261671, 0.261606, 0.261542, 0.261478, 0.261415, 0.261352, 0.261289, 0.261226, 0.261163, 0.261101, 0.261038, 0.260977, 0.260915, 0.260853, 0.260792, 0.260731, 0.26067, 0.26061, 0.260549, 0.260489, 0.260429, 0.26037, 0.26031, 0.260251, 0.260192, 0.260133, 0.260075, 0.260016, 0.259958, 0.2599, 0.259842, 0.259785, 0.259727, 0.25967, 0.259613, 0.259556, 0.2595, 0.259443, 0.259387, 0.259331, 0.259276, 0.25922, 0.259165, 0.259109, 0.259054, 0.259, 0.258945, 0.258891, 0.258836, 
0.258782, 0.258728, 0.258675, 0.258621, 0.258568, 0.258515, 0.258462, 0.258409, 0.258356, 0.258304, 0.258252, 0.258199, 0.258148, 0.258096, 0.258044, 0.257993, 0.257942, 0.257891, 0.25784, 0.257789, 0.257738, 0.257688, 0.257638, 0.257588, 0.257538, 0.257488, 0.257439, 0.257389, 0.25734, 0.257291, 0.257242, 0.257193, 0.257145, 0.257096, 0.257048, 0.257, 0.256952, 0.256904, 0.256856, 0.256809, 0.256761, 0.256714, 0.256667, 0.25662, 0.256573, 0.256527, 0.25648, 0.256434, 0.256387, 0.256341, 0.256295, 0.25625, 0.256204, 0.256159, 0.256113, 0.256068, 0.256023, 0.255978, 0.255933, 0.255889, 0.255844, 0.2558, 0.255755, 0.255711, 0.255667, 0.255623, 0.25558, 0.255536, 0.255493, 0.255449, 0.255406, 0.255363, 0.25532, 0.255277, 0.255235, 0.255192, 0.25515, 0.255107, 0.255065, 0.255023, 0.254981, 0.254939, 0.254898, 0.254856, 0.254815, 0.254773, 0.254732, 0.254691, 0.25465, 
0.254609, 0.254568, 0.254528, 0.254487, 0.254447, 0.254407, 0.254367, 0.254326, 0.254287, 0.254247, 0.254207, 0.254167, 0.254128, 0.254089, 0.254049, 0.25401, 0.253971, 0.253932, 0.253894, 0.253855, 0.253816, 0.253778, 0.253739, 0.253701, 0.253663, 0.253625, 0.253587, 0.253549, 0.253511, 0.253474, 0.253436, 0.253399, 0.253362, 0.253324, 0.253287, 0.25325, 0.253213, 0.253177, 0.25314, 0.253103, 0.253067, 0.25303, 0.252994, 0.252958, 0.252922, 0.252886, 0.25285, 0.252814, 0.252778, 0.252742, 0.252707, 0.252672, 0.252636, 0.252601, 0.252566, 0.252531, 0.252496, 0.252461, 0.252426, 0.252391, 0.252357, 0.252322, 0.252288, 0.252253, 0.252219, 0.252185, 0.252151, 0.252117, 0.252083, 0.252049, 0.252015, 0.251982, 0.251948, 0.251915, 0.251881, 0.251848, 0.251815, 0.251782, 0.251749, 0.251716, 0.251683, 0.25165, 0.251618, 0.251585, 0.251552, 0.25152, 0.251488, 0.251455, 0.251423, 0.251391, 0.251359, 0.251327, 0.251295, 0.251263, 0.251231, 0.2512, 0.251168, 0.251137, 0.251105, 0.251074, 0.251043, 0.251012, 0.250981, 0.250949, 0.250919, 0.250888, 0.250857, 0.250826, 0.250795, 0.250765, 0.250734, 0.250704, 0.250674, 0.250643, 0.250613, 0.250583, 0.250553, 0.250523, 0.250493, 0.250463, 0.250433, 0.250404, 0.250374, 0.250345, 0.250315, 0.250286, 0.250256, 0.250227, 0.250198, 0.250169, 0.25014, 0.250111, 0.250082, 0.250053, 0.250024, 0.249995, 0.249967, 0.249938, 0.24991, 0.249881, 0.249853, 0.249824, 0.249796, 0.249768, 0.24974, 0.249712, 0.249684, 0.249656, 0.249628, 0.2496, 0.249573, 0.249545, 0.249517, 0.24949, 0.249462, 0.249435, 0.249407, 0.24938, 0.249353, 0.249326, 0.249299, 0.249272, 0.249245, 0.249218, 0.249191, 0.249164, 0.249137, 0.249111, 0.249084, 0.249057, 0.249031, 0.249004, 0.248978, 0.248952, 0.248925, 0.248899, 0.248873, 0.248847, 0.248821, 0.248795, 0.248769, 0.248743, 0.248717, 0.248692, 0.248666, 0.24864, 0.248615, 0.248589, 0.248564, 0.248538, 0.248513, 0.248488, 0.248463, 0.248437, 0.248412, 0.248387, 0.248362, 0.248337, 0.248312, 0.248287, 0.248263, 0.248238, 0.248213, 0.248188, 0.248164, 0.248139, 0.248115, 0.24809, 0.248066, 0.248042, 0.248017, 0.247993, 0.247969, 0.247945, 0.247921, 0.247897, 0.247873, 0.247849, 0.247825, 0.247801, 0.247777, 0.247754, 0.24773, 0.247706, 0.247683, 0.247659, 0.247636, 0.247612, 0.247589, 0.247566, 0.247542, 0.247519, 0.247496, 0.247473, 0.24745, 0.247427, 0.247404, 0.247381, 0.247358, 0.247335, 0.247312, 0.24729, 0.247267, 0.247244, 0.247222, 0.247199, 0.247176, 0.247154, 0.247132, 0.247109, 0.247087, 0.247065, 0.247042, 0.24702, 0.246998, 0.246976, 0.246954, 0.246932, 0.24691, 0.246888, 0.246866, 0.246844, 0.246822, 0.2468, 0.246779, 0.246757, 0.246735, 0.246714, 0.246692, 0.246671, 0.246649, 0.246628, 0.246607, 0.246585, 0.246564, 0.246543, 0.246522, 0.2465, 0.246479, 0.246458, 0.246437, 0.246416, 0.246395, 0.246374, 0.246353, 0.246333, 0.246312, 0.246291, 0.24627, 0.24625, 0.246229, 0.246208, 0.246188, 0.246167, 0.246147, 0.246126, 0.246106, 0.246086, 0.246065, 0.246045, 0.246025, 0.246005, 0.245984, 0.245964, 0.245944, 0.245924, 0.245904, 0.245884, 0.245864, 0.245844, 0.245825, 0.245805, 0.245785, 0.245765, 0.245746, 0.245726, 0.245706, 0.245687, 0.245667, 0.245648, 0.245628, 0.245609, 0.245589, 0.24557, 0.245551, 0.245531, 0.245512, 0.245493, 0.245474, 0.245454, 0.245435, 0.245416, 0.245397, 0.245378, 0.245359, 0.24534, 0.245321, 0.245302, 0.245284, 0.245265, 0.245246, 0.245227, 0.245209, 0.24519, 0.245171, 0.245153, 0.245134, 0.245116, 0.245097, 0.245079, 0.24506, 0.245042, 0.245023, 0.245005, 0.244987, 0.244968, 0.24495, 0.244932, 0.244914, 0.244896, 0.244878, 0.24486, 0.244842, 0.244824, 0.244806, 0.244788, 0.24477, 0.244752, 0.244734, 0.244716, 0.244698, 0.244681, 0.244663, 0.244645, 0.244628, 0.24461, 0.244592, 0.244575, 0.244557, 0.24454, 0.244522, 0.244505, 0.244487, 0.24447, 0.244453, 0.244435, 0.244418, 0.244401, 0.244384, 0.244366, 0.244349, 0.244332, 0.244315, 0.244298, 0.244281, 0.244264, 0.244247, 0.24423, 0.244213, 0.244196, 0.244179, 0.244162, 0.244146, 0.244129, 0.244112, 0.244095, 0.244079, 0.244062, 0.244045, 0.244029, 0.244012, 0.243996, 0.243979, 0.243963, 0.243946, 0.24393, 0.243913, 0.243897, 0.243881, 0.243864, 0.243848, 0.243832, 0.243815, 0.243799, 0.243783, 0.243767, 0.243751, 0.243735, 0.243719, 0.243703, 0.243686, 0.24367, 0.243655, 0.243639, 0.243623, 0.243607, 0.243591, 0.243575, 0.243559])



y2 = np.array([0.678854, 0.6649, 0.652079, 0.640275, 0.629383, 0.619309, 0.609967, 0.601282, 0.593185, 0.585618, 0.578527, 0.571866, 0.565592, 0.55967, 0.554066, 0.548752, 0.543702, 0.538894, 0.534307, 0.529923, 0.525726, 0.521701, 0.517836, 0.514119, 0.510539, 0.507087, 0.503754, 0.500533, 0.497416, 0.494397, 0.491469, 0.488629, 0.485869, 0.483187, 0.480578, 0.478038, 0.475563, 0.473151, 0.470798, 0.468501, 0.466258, 0.464066, 0.461923, 0.459828, 
0.457777, 0.455769, 0.453803, 0.451877, 0.449989, 0.448137, 0.446321, 0.44454, 0.442791, 0.441074, 0.439388, 0.437732, 0.436105, 0.434505, 0.432932, 0.431386, 0.429865, 0.428368, 0.426896, 0.425447, 0.42402, 0.422615, 0.421232, 0.41987, 0.418528, 0.417205, 0.415902, 0.414618, 0.413351, 0.412103, 0.410872, 0.409658, 0.408461, 0.40728, 0.406115, 0.404966, 0.403831, 0.402712, 0.401607, 0.400516, 0.399439, 0.398376, 0.397326, 0.396289, 0.395265, 0.394253, 0.393254, 0.392267, 0.391292, 0.390329, 0.389376, 0.388435, 0.387505, 0.386586, 0.385677, 0.384779, 0.383891, 0.383013, 0.382145, 0.381287, 0.380438, 0.379598, 0.378768, 0.377946, 0.377134, 0.37633, 0.375535, 0.374748, 0.37397, 0.3732, 0.372438, 0.371684, 0.370937, 0.370199, 0.369468, 0.368744, 0.368028, 0.367319, 0.366617, 0.365922, 0.365234, 0.364553, 0.363878, 0.36321, 0.362549, 0.361894, 0.361245, 0.360603, 0.359967, 0.359337, 0.358712, 0.358094, 0.357482, 0.356875, 0.356274, 0.355678, 0.355088, 0.354503, 0.353924, 0.35335, 0.352781, 0.352218, 0.351659, 0.351106, 0.350557, 0.350013, 0.349474, 0.34894, 0.348411, 0.347886, 0.347365, 0.34685, 0.346338, 0.345832, 0.345329, 0.344831, 0.344337, 0.343847, 
0.343361, 0.34288, 0.342402, 0.341928, 0.341459, 0.340993, 0.340531, 0.340073, 0.339619, 0.339168, 0.338721, 0.338278, 0.337838, 0.337402, 0.336969, 0.33654, 0.336114, 0.335691, 0.335272, 0.334857, 0.334444, 0.334035, 0.333629, 0.333226, 0.332826, 0.332429, 0.332035, 0.331645, 0.331257, 0.330872, 0.330491, 0.330112, 0.329736, 0.329362, 0.328992, 0.328624, 0.328259, 0.327897, 0.327538, 0.327181, 0.326827, 0.326475, 0.326126, 0.32578, 0.325436, 0.325094, 0.324755, 0.324418, 0.324084, 0.323752, 0.323423, 0.323096, 0.322771, 0.322449, 0.322128, 0.321811, 0.321495, 0.321181, 0.32087, 0.320561, 0.320254, 0.319949, 0.319646, 0.319345, 0.319047, 0.31875, 0.318455, 0.318163, 0.317872, 0.317583, 0.317297, 0.317012, 0.316729, 0.316448, 0.316169, 0.315892, 0.315616, 0.315342, 0.315071, 0.314801, 0.314532, 0.314266, 0.314001, 0.313738, 0.313476, 0.313217, 0.312959, 0.312702, 0.312447, 0.312194, 0.311943, 0.311693, 0.311445, 0.311198, 0.310953, 0.310709, 0.310467, 0.310226, 0.309987, 0.309749, 0.309513, 0.309279, 0.309045, 0.308814, 0.308583, 0.308354, 0.308127, 0.3079, 0.307676, 0.307452, 0.30723, 0.307009, 0.30679, 0.306572, 0.306355, 0.306139, 0.305925, 0.305712, 0.3055, 0.30529, 0.305081, 0.304873, 0.304666, 0.30446, 0.304256, 0.304053, 0.303851, 0.30365, 0.30345, 0.303252, 0.303055, 0.302858, 0.302663, 0.302469, 0.302276, 0.302085, 0.301894, 0.301704, 0.301516, 0.301328, 0.301142, 0.300957, 0.300772, 0.300589, 0.300407, 0.300225, 0.300045, 0.299866, 0.299688, 0.29951, 0.299334, 0.299159, 0.298984, 0.298811, 0.298638, 0.298467, 0.298296, 0.298126, 0.297958, 0.29779, 0.297623, 0.297457, 0.297292, 0.297127, 0.296964, 0.296801, 0.29664, 0.296479, 0.296319, 0.29616, 0.296001, 0.295844, 0.295687, 0.295531, 0.295376, 0.295222, 0.295069, 0.294916, 0.294764, 0.294613, 0.294463, 0.294314, 0.294165, 0.294017, 0.29387, 0.293723, 0.293578, 0.293433, 0.293289, 0.293145, 0.293002, 0.29286, 0.292719, 0.292578, 0.292438, 0.292299, 0.292161, 0.292023, 0.291886, 0.291749, 0.291613, 0.291478, 0.291344, 0.29121, 0.291077, 0.290945, 0.290813, 0.290682, 0.290551, 0.290421, 0.290292, 0.290163, 0.290035, 0.289908, 0.289781, 0.289655, 0.289529, 0.289404, 0.28928, 0.289156, 0.289033, 0.28891, 0.288788, 0.288667, 0.288546, 0.288426, 0.288306, 0.288187, 0.288068, 0.28795, 0.287833, 0.287716, 0.287599, 0.287483, 0.287368, 0.287253, 0.287139, 0.287025, 0.286912, 0.2868, 0.286687, 0.286576, 0.286465, 0.286354, 0.286244, 0.286134, 0.286025, 0.285917, 0.285808, 0.285701, 0.285594, 0.285487, 0.285381, 0.285275, 0.28517, 0.285065, 0.284961, 0.284857, 0.284754, 0.284651, 0.284548, 0.284446, 0.284345, 0.284244, 0.284143, 0.284043, 0.283943, 0.283844, 0.283745, 0.283647, 0.283549, 0.283451, 0.283354, 0.283257, 0.283161, 0.283065, 0.282969, 0.282874, 0.28278, 0.282685, 0.282592, 0.282498, 0.282405, 0.282313, 0.28222, 0.282128, 0.282037, 0.281946, 0.281855, 0.281765, 0.281675, 0.281586, 0.281496, 0.281408, 0.281319, 
0.281231, 0.281144, 0.281056, 0.280969, 0.280883, 0.280797, 0.280711, 0.280625, 0.28054, 0.280456, 0.280371, 0.280287, 0.280203, 0.28012, 0.280037, 0.279954, 0.279872, 0.27979, 0.279708, 0.279627, 0.279546, 0.279465, 0.279385, 0.279305, 0.279225, 0.279146, 0.279067, 0.278988, 0.27891, 0.278832, 0.278754, 0.278677, 0.278599, 0.278523, 0.278446, 0.27837, 0.278294, 0.278218, 0.278143, 0.278068, 0.277993, 0.277919, 0.277845, 0.277771, 0.277698, 0.277624, 0.277551, 0.277479, 0.277406, 0.277334, 0.277263, 0.277191, 0.27712, 0.277049, 0.276978, 0.276908, 0.276838, 0.276768, 0.276698, 
0.276629, 0.27656, 0.276491, 0.276423, 0.276354, 0.276286, 0.276219, 0.276151, 0.276084, 0.276017, 0.275951, 0.275884, 0.275818, 0.275752, 0.275686, 0.275621, 0.275556, 0.275491, 0.275426, 0.275362, 0.275298, 0.275234, 0.27517, 0.275107, 0.275043, 0.274981, 0.274918, 0.274855, 0.274793, 0.274731, 0.274669, 0.274608, 0.274546, 0.274485, 0.274424, 0.274364, 0.274303, 0.274243, 0.274183, 0.274124, 0.274064, 0.274005, 0.273946, 0.273887, 
0.273828, 0.27377, 0.273712, 0.273654, 0.273596, 0.273538, 0.273481, 0.273424, 0.273367, 0.27331, 0.273254, 0.273197, 0.273141, 0.273085, 0.27303, 0.272974, 0.272919, 0.272864, 0.272809, 0.272754, 0.2727, 0.272646, 0.272591, 0.272538, 0.272484, 0.27243, 0.272377, 0.272324, 0.272271, 0.272218, 0.272166, 0.272113, 0.272061, 0.272009, 0.271958, 0.271906, 0.271855, 0.271803, 0.271752, 0.271701, 0.271651, 0.2716, 0.27155, 0.2715, 0.27145, 
0.2714, 0.27135, 0.271301, 0.271252, 0.271202, 0.271154, 0.271105, 0.271056, 0.271008, 0.27096, 0.270912, 0.270864, 0.270816, 0.270768, 0.270721, 
0.270674, 0.270627, 0.27058, 0.270533, 0.270487, 0.27044, 0.270394, 0.270348, 0.270302, 0.270256, 0.270211, 0.270165, 0.27012, 0.270075, 0.27003, 
0.269985, 0.26994, 0.269896, 0.269851, 0.269807, 0.269763, 0.269719, 0.269676, 0.269632, 0.269589, 0.269545, 0.269502, 0.269459, 0.269416, 0.269374, 0.269331, 0.269289, 0.269246, 0.269204, 0.269162, 0.26912, 0.269079, 0.269037, 0.268996, 0.268955, 0.268913, 0.268872, 0.268832, 0.268791, 0.26875, 0.26871, 0.26867, 0.268629, 0.268589, 0.26855, 0.26851, 0.26847, 0.268431, 0.268391, 0.268352, 0.268313, 0.268274, 0.268235, 0.268197, 0.268158, 0.26812, 0.268081, 0.268043, 0.268005, 0.267967, 0.26793, 0.267892, 0.267854, 0.267817, 0.26778, 0.267743, 0.267706, 0.267669, 0.267632, 0.267595, 0.267559, 0.267522, 0.267486, 0.26745, 0.267414, 0.267378, 0.267342, 0.267306, 0.267271, 0.267235, 0.2672, 0.267165, 0.26713, 0.267095, 0.26706, 0.267025, 0.26699, 0.266956, 0.266921, 0.266887, 0.266853, 0.266819, 0.266785, 0.266751, 0.266717, 0.266684, 0.26665, 0.266617, 0.266583, 0.26655, 0.266517, 0.266484, 0.266451, 0.266419, 0.266386, 0.266353, 0.266321, 0.266289, 0.266257, 0.266224, 0.266192, 0.266161, 0.266129, 0.266097, 0.266065, 0.266034, 0.266003, 0.265971, 0.26594, 0.265909, 0.265878, 0.265847, 0.265816, 0.265786, 0.265755, 0.265725, 0.265694, 0.265664, 0.265634, 0.265604, 0.265574, 0.265544, 0.265514, 0.265485, 0.265455, 0.265425, 0.265396, 0.265367, 0.265338, 0.265308, 0.265279, 0.26525, 0.265222, 0.265193, 0.265164, 0.265136, 0.265107, 0.265079, 0.265051, 0.265022, 0.264994, 0.264966, 0.264938, 0.264911, 0.264883, 0.264855, 0.264828, 0.2648, 0.264773, 0.264746, 0.264718, 0.264691, 0.264664, 0.264637, 0.264611, 0.264584, 0.264557, 0.26453, 0.264504, 0.264478, 0.264451, 0.264425, 0.264399, 
0.264373, 0.264347, 0.264321, 0.264295, 0.264269, 0.264244, 0.264218, 0.264193, 0.264167, 0.264142, 0.264117, 0.264091, 0.264066, 0.264041, 0.264016, 0.263992, 0.263967, 0.263942, 0.263917, 0.263893, 0.263868, 0.263844, 0.26382, 0.263796, 0.263771, 0.263747, 0.263723, 0.2637, 0.263676, 0.263652, 0.263628, 0.263605, 0.263581, 0.263558, 0.263534, 0.263511, 0.263488, 0.263465, 0.263442, 0.263419, 0.263396, 0.263373, 0.26335, 0.263327, 0.263305, 0.263282, 0.26326, 0.263237, 0.263215, 0.263193, 0.26317, 0.263148, 0.263126, 0.263104, 0.263082, 0.26306, 0.263039, 0.263017, 0.262995, 0.262974, 0.262952, 0.262931, 0.262909, 0.262888, 0.262867, 0.262846, 0.262825, 0.262804, 0.262783, 0.262762, 0.262741, 0.26272, 0.262699, 0.262679, 0.262658, 0.262638, 0.262617, 0.262597, 0.262577, 0.262557, 0.262536, 0.262516, 0.262496, 0.262476, 0.262456, 0.262437, 0.262417, 0.262397, 0.262377, 0.262358, 0.262338, 0.262319, 0.262299, 0.26228, 0.262261, 0.262242, 0.262222, 0.262203, 0.262184, 0.262165, 0.262146, 0.262128, 0.262109, 0.26209, 0.262071, 0.262053, 0.262034, 0.262016, 0.261997, 0.261979, 0.261961, 0.261942, 0.261924, 0.261906, 0.261888, 0.26187, 0.261852, 0.261834, 0.261816, 0.261799, 0.261781, 0.261763, 0.261746, 0.261728, 0.26171, 0.261693, 0.261676, 0.261658, 0.261641, 0.261624, 0.261607, 0.26159, 0.261573, 0.261556, 0.261539, 0.261522, 0.261505, 0.261488, 0.261471, 0.261455, 0.261438, 0.261422, 0.261405, 0.261389, 0.261372, 0.261356, 0.26134, 0.261323, 0.261307, 0.261291, 0.261275, 0.261259, 0.261243, 0.261227, 0.261211, 0.261195, 0.26118, 0.261164, 0.261148, 0.261133, 0.261117, 0.261102, 0.261086, 0.261071, 0.261055, 0.26104, 0.261025, 0.26101, 0.260994, 0.260979, 0.260964, 0.260949, 0.260934, 0.260919, 0.260904, 0.26089, 0.260875, 
0.26086, 0.260846, 0.260831, 0.260816, 0.260802, 0.260787, 0.260773, 0.260759, 0.260744, 0.26073, 0.260716, 0.260701, 0.260687, 0.260673, 0.260659, 0.260645, 0.260631, 0.260617, 0.260603, 0.26059, 0.260576, 0.260562, 0.260548, 0.260535, 0.260521])

m3 = np.loadtxt(sys.argv[9],delimiter=' ')

m3 = (m3[:,1:])
y3 = np.array(m3.reshape(len(m3),1))

x = np.arange(1, 1001)




plt.plot(x,y1, label="m1")
plt.plot(x,y2, label="m2")
plt.plot(x,y3, label="m3")

leg = plt.legend(loc='upper center')
plt.show()




